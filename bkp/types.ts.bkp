// import type { Message, MessageParam } from '@anthropic-ai/sdk/resources/messages';

// // Type aliases for numeric types used in SDKMessage
// type float = number;
// type int = number;

export interface CacheControlEphemeral {
    type: 'ephemeral';
  }

  export interface ThinkingBlockParam {
    signature: string;

    thinking: string;

    type: 'thinking';
  }

  export interface CitationCharLocationParam {
    cited_text: string;

    document_index: number;

    document_title: string | null;

    end_char_index: number;

    start_char_index: number;

    type: 'char_location';
  }

  export interface CitationPageLocationParam {
    cited_text: string;

    document_index: number;

    document_title: string | null;

    end_page_number: number;

    start_page_number: number;

    type: 'page_location';
  }

  export interface CitationPageLocationParam {
    cited_text: string;

    document_index: number;

    document_title: string | null;

    end_page_number: number;

    start_page_number: number;

    type: 'page_location';
  }

  export interface CitationContentBlockLocationParam {
    cited_text: string;

    document_index: number;

    document_title: string | null;

    end_block_index: number;

    start_block_index: number;

    type: 'content_block_location';
  }


  export interface CitationWebSearchResultLocationParam {
    cited_text: string;

    encrypted_index: string;

    title: string | null;

    type: 'web_search_result_location';

    url: string;
  }

  export type TextCitationParam =
  | CitationCharLocationParam
  | CitationPageLocationParam
  | CitationContentBlockLocationParam
  | CitationWebSearchResultLocationParam;


export interface TextBlockParam {
    text: string;

    type: 'text';

    /**
     * Create a cache control breakpoint at this content block.
     */
    cache_control?: CacheControlEphemeral | null;

    citations?: Array<TextCitationParam> | null;
  }

  export interface Base64ImageSource {
    data: string;

    media_type: 'image/jpeg' | 'image/png' | 'image/gif' | 'image/webp';

    type: 'base64';
  }

  export interface URLImageSource {
    type: 'url';

    url: string;
  }

  export interface ImageBlockParam {
    source: Base64ImageSource | URLImageSource;

    type: 'image';

    /**
     * Create a cache control breakpoint at this content block.
     */
    cache_control?: CacheControlEphemeral | null;
  }

  export interface Base64PDFSource {
    data: string;

    media_type: 'application/pdf';

    type: 'base64';
  }

  export interface PlainTextSource {
    data: string;

    media_type: 'text/plain';

    type: 'text';
  }

  export interface ContentBlockSource {
    content: string | Array<ContentBlockSourceContent>;

    type: 'content';
  }
  export type ContentBlockSourceContent = TextBlockParam | ImageBlockParam;

  export interface URLPDFSource {
    type: 'url';

    url: string;
  }

  export interface CitationsConfigParam {
    enabled?: boolean;
  }

  export interface DocumentBlockParam {
    source: Base64PDFSource | PlainTextSource | ContentBlockSource | URLPDFSource;

    type: 'document';

    /**
     * Create a cache control breakpoint at this content block.
     */
    cache_control?: CacheControlEphemeral | null;

    citations?: CitationsConfigParam;

    context?: string | null;

    title?: string | null;
  }

export type ContentBlockParam =
  | TextBlockParam
  | ImageBlockParam
  | DocumentBlockParam
  | ThinkingBlockParam
  | RedactedThinkingBlockParam
  | ToolUseBlockParam
  | ToolResultBlockParam
  | ServerToolUseBlockParam
  | WebSearchToolResultBlockParam;

export interface MessageParam {
    content: string | Array<ContentBlockParam>;

    role: 'user' | 'assistant';
  }

  export interface CitationCharLocation {
    cited_text: string;

    document_index: number;

    document_title: string | null;

    end_char_index: number;

    start_char_index: number;

    type: 'char_location';
  }

  export interface CitationPageLocation {
    cited_text: string;

    document_index: number;

    document_title: string | null;

    end_page_number: number;

    start_page_number: number;

    type: 'page_location';
  }

  export interface CitationContentBlockLocation {
    cited_text: string;

    document_index: number;

    document_title: string | null;

    end_block_index: number;

    start_block_index: number;

    type: 'content_block_location';
  }

  export interface CitationsWebSearchResultLocation {
    cited_text: string;

    encrypted_index: string;

    title: string | null;

    type: 'web_search_result_location';

    url: string;
  }


export type TextCitation =
  | CitationCharLocation
  | CitationPageLocation
  | CitationContentBlockLocation
  | CitationsWebSearchResultLocation;

export interface TextBlock {
    /**
     * Citations supporting the text block.
     *
     * The type of citation returned will depend on the type of document being cited.
     * Citing a PDF results in `page_location`, plain text results in `char_location`,
     * and content document results in `content_block_location`.
     */
    citations: Array<TextCitation> | null;

    text: string;

    type: 'text';
  }


  export interface ThinkingBlock {
    signature: string;

    thinking: string;

    type: 'thinking';
  }

  export interface RedactedThinkingBlock {
    data: string;

    type: 'redacted_thinking';
  }

  export interface ToolUseBlock {
    id: string;

    input: unknown;

    name: string;

    type: 'tool_use';
  }

  export interface ServerToolUseBlock {
    id: string;

    input: unknown;

    name: 'web_search';

    type: 'server_tool_use';
  }

  export interface WebSearchToolResultError {
    error_code:
      | 'invalid_tool_input'
      | 'unavailable'
      | 'max_uses_exceeded'
      | 'too_many_requests'
      | 'query_too_long';

    type: 'web_search_tool_result_error';
  }

  export interface WebSearchResultBlock {
    encrypted_content: string;

    page_age: string | null;

    title: string;

    type: 'web_search_result';

    url: string;
  }

  export type WebSearchToolResultBlockContent = WebSearchToolResultError | Array<WebSearchResultBlock>;

  export interface WebSearchToolResultBlock {
    content: WebSearchToolResultBlockContent;

    tool_use_id: string;

    type: 'web_search_tool_result';
  }

export type ContentBlock =
  | TextBlock
  | ThinkingBlock
  | RedactedThinkingBlock
  | ToolUseBlock
  | ServerToolUseBlock
  | WebSearchToolResultBlock;

export interface Message {
    /**
     * Unique object identifier.
     *
     * The format and length of IDs may change over time.
     */
    id: string;

    /**
     * Content generated by the model.
     *
     * This is an array of content blocks, each of which has a `type` that determines
     * its shape.
     *
     * Example:
     *
     * ```json
     * [{ "type": "text", "text": "Hi, I'm Claude." }]
     * ```
     *
     * If the request input `messages` ended with an `assistant` turn, then the
     * response `content` will continue directly from that last turn. You can use this
     * to constrain the model's output.
     *
     * For example, if the input `messages` were:
     *
     * ```json
     * [
     *   {
     *     "role": "user",
     *     "content": "What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun"
     *   },
     *   { "role": "assistant", "content": "The best answer is (" }
     * ]
     * ```
     *
     * Then the response `content` might be:
     *
     * ```json
     * [{ "type": "text", "text": "B)" }]
     * ```
     */
    content: Array<ContentBlock>;

    /**
     * The model that will complete your prompt.\n\nSee
     * [models](https://docs.anthropic.com/en/docs/models-overview) for additional
     * details and options.
     */
    model: Model;

    /**
     * Conversational role of the generated message.
     *
     * This will always be `"assistant"`.
     */
    role: 'assistant';

    /**
     * The reason that we stopped.
     *
     * This may be one the following values:
     *
     * - `"end_turn"`: the model reached a natural stopping point
     * - `"max_tokens"`: we exceeded the requested `max_tokens` or the model's maximum
     * - `"stop_sequence"`: one of your provided custom `stop_sequences` was generated
     * - `"tool_use"`: the model invoked one or more tools
     * - `"pause_turn"`: we paused a long-running turn. You may provide the response
     *   back as-is in a subsequent request to let the model continue.
     * - `"refusal"`: when streaming classifiers intervene to handle potential policy
     *   violations
     *
     * In non-streaming mode this value is always non-null. In streaming mode, it is
     * null in the `message_start` event and non-null otherwise.
     */
    stop_reason: StopReason | null;

    /**
     * Which custom stop sequence was generated, if any.
     *
     * This value will be a non-null string if one of your custom stop sequences was
     * generated.
     */
    stop_sequence: string | null;

    /**
     * Object type.
     *
     * For Messages, this is always `"message"`.
     */
    type: 'message';

    /**
     * Billing and rate-limit usage.
     *
     * Anthropic's API bills and rate-limits by token counts, as tokens represent the
     * underlying cost to our systems.
     *
     * Under the hood, the API transforms requests into a format suitable for the
     * model. The model's output then goes through a parsing stage before becoming an
     * API response. As a result, the token counts in `usage` will not match one-to-one
     * with the exact visible content of an API request or response.
     *
     * For example, `output_tokens` will be non-zero, even for an empty string response
     * from Claude.
     *
     * Total input tokens in a request is the summation of `input_tokens`,
     * `cache_creation_input_tokens`, and `cache_read_input_tokens`.
     */
    usage: Usage;
  }

export type SDKMessage =
    // An assistant message
    | {
        type: "assistant";
        message: Message; // from Anthropic SDK
        session_id: string;
    }

    // A user message
    | {
        type: "user";
        message: MessageParam; // from Anthropic SDK
        session_id: string;
    }

    // Emitted as the last message
    | {
        type: "result";
        subtype: "success";
        duration_ms: float;
        duration_api_ms: float;
        is_error: boolean;
        num_turns: int;
        result: string;
        session_id: string;
        total_cost_usd: float;
    }

    // Emitted as the last message, when we've reached the maximum number of turns
    | {
        type: "result";
        subtype: "error_max_turns" | "error_during_execution";
        duration_ms: float;
        duration_api_ms: float;
        is_error: boolean;
        num_turns: int;
        session_id: string;
        total_cost_usd: float;
    }

    // Emitted as the first message at the start of a conversation
    | {
        type: "system";
        subtype: "init";
        apiKeySource: string;
        cwd: string;
        session_id: string;
        tools: string[];
        mcp_servers: {
            name: string;
            status: string;
        }[];
        model: string;
        permissionMode: "default" | "acceptEdits" | "bypassPermissions" | "plan";
    };

